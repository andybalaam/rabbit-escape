textworld.WrongLineLength=Line number ${lineNum} (${line}) has the wrong length in text world lines:\n${lines}
textworld.InvalidMetaLine=Meta line '${line}' is invalid at line ${lineNum} in text world lines:\n${lines}
textworld.NotEnoughStars=Meta line '${line}' refers to a * we haven't seen at line ${lineNum} in text world lines:\n${lines}
textworld.TooManyStars=More * characters than matching meta lines found in text world lines:\n${lines}
textworld.NonIntegerMetaValue=Meta line '${line}' has a non-integer value where an integer is required at line ${lineNum} in text world lines:\n${lines}
textworld.UnknownMetaKey=Meta line '${line}' provides an unknown property at line ${lineNum} in text world lines:\n${lines}
textworld.DuplicateMetaKey=Meta line '${line}' at line ${lineNum} redefines the same property as a previous line in text world lines:\n${lines}
textworld.UnknownCharacter=Line number ${lineNum} contains an unknown character '${character}' in text world lines:\n${lines}
textworld.UnknownVoidMarkerStyle=Void edge marker '${wrongStyle}' is unknown. Known list: ${knownStyles}. Not case sensitive.
LoadWorldFile.Failed=Unable to load world file '${fileName}'.
LoadWorldFile.MissingFile=File '${fileName}' does not exist.
LoadWorldFile.ReadingFailed=Reading file '${fileName}' failed with IOException: '${iocause}'.
solution.SolutionExceptions.UnexpectedState=Solution failed: state was ${actual} but we expected ${expected} at command ${commandIndex} of solution ${solutionId} in ${level}:\n${world}.\nTo see: ./runrabbit swing -l ${level} -s${solutionId}
solution.SolutionExceptions.DidNotWin=Solution failed: We expected to win, but the state was ${actual} at command ${commandIndex} of solution ${solutionId} in ${level}:\n${world}.\nTo see: ./runrabbit swing -l ${level} -s${solutionId}
solution.SolutionExceptions.RanPastEnd=Solution failed: world has stopped (state: ${worldState}) but there are more solution commands at command ${commandIndex} of solution ${solutionId} in ${level}:\n${world}.\nTo see: ./runrabbit swing -l ${level} -s${solutionId}
solution.SolutionExceptions.UsedRunOutAbility=Solution failed: ability '${ability}' was used when there were none left at command ${commandIndex} of solution ${solutionId} in ${level}:\n${world}.\nTo see: ./runrabbit swing -l ${level} -s${solutionId}
solution.SolutionExceptions.UsedMissingAbility=Solution failed: ability '${ability}' was used but this level does not provide it at command ${commandIndex} of solution ${solutionId} in ${level}:\n${world}.\nTo see: ./runrabbit swing -l ${level} -s${solutionId}
solution.SolutionExceptions.PlacedTokenOutsideWorld=Solution failed: placed a token at (${x}, ${y}) but the world is only ${worldWidth}x${worldHeight} in size at command ${commandIndex} of solution ${solutionId} in ${level}:\n${world}.\nTo see: ./runrabbit swing -l ${level} -s${solutionId}
solution.SolutionExceptions.FailedToPlaceToken=Solution failed: tried to place a ${type} token at (${x}, ${y}) but a block was already there so it did not place at command ${commandIndex} of solution ${solutionId} in ${level}:\n${world}.\nTo see: ./runrabbit swing -l ${level} -s${solutionId}
solution.SolutionExceptions.UntilActionNeverEnded=Solution failed: the level never finished, but there was an until:${expectedState} action at command ${commandIndex} of solution ${solutionId} in ${level}:\n${world}.\nTo see: ./runrabbit swing -l ${level} -s${solutionId}
solution.SolutionExceptions.UnknownProblem=Solution failed: an error occurred at command ${commandIndex} of solution ${solutionId} in ${level}:\n${world}.\nTo see: ./runrabbit swing -l ${level} -s${solutionId}
solution.SolutionCommand.WaitActionInMultiActionCommand=Wait actions are illegal in multi-action commands: '${command}'
util.CommandLineOption.UnknownOption=Unknown option: '${unknownArg}'.
util.CommandLineOption.OptionRequiresParameter=A parameter is required for the option, '${arg}', but none was found.
util.CommandLineOption.OptionDoesNotTakeParameter=The option, '${arg}', does not take a parameter, but one was supplied.
config.Config.UnknownKey=Found an unexpected key in the config file: '${key}'.  Please remove it.
config.ConfigSchema.KeyNotAllowed=The config key '${key}' may not be used - it is reserved for system use.